unit UConsCnpj;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics, Vcl.Controls,
  Vcl.Forms, Vcl.Dialogs, IPPeerClient, System.Json, REST.Client, Data.Bind.Components, Data.Bind.ObjectScope,
  Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtCtrls, Vcl.Mask;

type
  TFrmPrincipal = class(TForm)
    RESTClient: TRESTClient;
    RESTRequest: TRESTRequest;
    RESTResponse: TRESTResponse;
    LabelNomeEmpresa: TLabel;
    EdtNomeEmpresa: TEdit;
    PanelTop: TPanel;
    BtnConsulta: TBitBtn;
    LabelCnpj: TLabel;
    EdtCnpj: TEdit;
    MemoAtividadePrincipal: TMemo;
    LabelAtividadePrincipal: TLabel;
    PanelClient: TPanel;
    LabelDataSituacao: TLabel;
    EdtDataSituacao: TMaskEdit;
    BtnConsTeste: TBitBtn;
    MemoJson: TMemo;
    MemoAtividadeSecundaria: TMemo;
    Label1: TLabel;
    procedure BtnConsultaClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure BtnConsTesteClick(Sender: TObject);
  private
    procedure ConsultaCnpj;
  public
    { Public declarations }
  end;

var
  FrmPrincipal: TFrmPrincipal;

implementation

uses Data.DBXJSONReflect, UClassEmpresa, UClassAtividadeSecEmpresa, UClassSocioEmpresa;

{$R *.dfm}

procedure TFrmPrincipal.BtnConsTesteClick(Sender: TObject);
var
  lEmpresa: TEmpresa;
  lJsonObject: TJSONObject;
  lJsonSubObject: TJSONObject;
  lJsonArray: TJSONArray;
  lCount: Byte;
  lAtividadeSecEmpresa: TAtividadeSecEmpresa;
  lSocioAdmEmpresa: TSocioAdmEmpresa;
begin

  try

    // RESTRequest.Resource := '/{cnpj}';

    // RESTRequest.Params.AddUrlSegment('cnpj', EdtCnpj.Text);

    // RESTRequest.Execute;

    // lJsonObject := RESTResponse.JSONValue as TJSONObject;

    lJsonObject := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(MemoJson.Text), 0) as TJSONObject;


    // if (RESTResponse.StatusCode = 200) then
    // begin

    lEmpresa := TEmpresa.Create;
    try

      lEmpresa.Nome := lJsonObject.Values['nome'].Value;

      EdtNomeEmpresa.Text := lEmpresa.Nome;

      lJsonArray := lJsonObject.Values['atividade_principal'] as TJSONArray;

      for lCount := 0 to lJsonArray.Count - 1 do
      begin

        lJsonSubObject := lJsonArray.Items[lCount] as TJSONObject;

        lEmpresa.TextAtividadePrincipalEmpresa := lJsonSubObject.Values['text'].Value;

        lEmpresa.CodAtividadePrincipalEmpresa := lJsonSubObject.Values['code'].Value;

      end;

      MemoAtividadePrincipal.Lines.Add(lEmpresa.CodAtividadePrincipalEmpresa + ' ' +
        lEmpresa.TextAtividadePrincipalEmpresa);

      lEmpresa.DataSituacao := lJsonObject.Values['data_situacao'].Value;

      EdtDataSituacao.Text := lEmpresa.DataSituacao;

      lEmpresa.Complemento := lJsonObject.Values['complemento'].Value;

      lEmpresa.Uf := lJsonObject.Values['uf'].Value;

      lEmpresa.Telefone := lJsonObject.Values['telefone'].Value;

      lEmpresa.Email := lJsonObject.Values['email'].Value;

      lJsonArray := lJsonObject.Values['atividades_secundarias'] as TJSONArray;

      for lCount := 0 to lJsonArray.Count - 1 do
      begin

        lJsonSubObject := lJsonArray.Items[lCount] as TJSONObject;

        lAtividadeSecEmpresa := TAtividadeSecEmpresa.Create;

        lAtividadeSecEmpresa.Code := lJsonSubObject.Values['code'].Value;

        lAtividadeSecEmpresa.Text := lJsonSubObject.Values['text'].Value;

        lEmpresa.AtividadeSecundaria.Add(lAtividadeSecEmpresa);

      end;

      lJsonArray := lJsonObject.Values['qsa'] as TJSONArray;

      for lCount := 0 to lJsonArray.Count - 1 do
      begin

        lJsonSubObject := lJsonArray.Items[lCount] as TJSONObject;

        lSocioAdmEmpresa := TSocioAdmEmpresa.Create;

        lSocioAdmEmpresa.Qual := lJsonSubObject.Values['qual'].Value;

        lSocioAdmEmpresa.Nome := lJsonSubObject.Values['nome'].Value;

        // Get ta deprecated,mas Values da access violation e não consegui tratar de jeito nenhum.
        if (lJsonSubObject.Get('pais_origem') <> nil) then
        begin

          lSocioAdmEmpresa.PaisOrigem := lJsonSubObject.Values['pais_origem'].Value;

        end;

        if (lJsonSubObject.Get('nome_rep_legal') <> nil) then
        begin

          lSocioAdmEmpresa.NomeRepLegal := lJsonSubObject.Values['nome_rep_legal'].Value;

        end;

        if (lJsonSubObject.Get('qual_rep_legal') <> nil) then
        begin


          lSocioAdmEmpresa.QualRepLegal := lJsonSubObject.Values['qual_rep_legal'].Value;

        end;

        lEmpresa.Qsa.Add(lSocioAdmEmpresa);

      end;

    finally
      lEmpresa.Destroy;
    end;

    // end
    // else
    // begin

    // raise Exception.Create(lJsonObject.Values['message'].Value);

    // end;

  except
    on E: Exception do
    begin
      raise Exception.Create('Erro ao realizar consulta do cnpj, motivo ' + E.Message);
    end;
  end;

end;

procedure TFrmPrincipal.BtnConsultaClick(Sender: TObject);
begin

  if (Trim(EdtCnpj.Text).IsEmpty) then
  begin

    EdtCnpj.SetFocus;

    raise Exception.Create('Campo CNPJ é obrigatório');

  end;

  if (Trim(EdtCnpj.Text).Length <> 14) then
  begin

    EdtCnpj.SetFocus;

    raise Exception.Create('CNPJ é inválido');

  end;

  Self.ConsultaCnpj;

end;

procedure TFrmPrincipal.ConsultaCnpj;
var

  lJsonObject: TJSONObject;
  lJsonSubObject: TJSONObject;

  lJsonArray: TJSONArray;

  lCount: SmallInt;

begin

  try

    RESTRequest.Resource := '/{cnpj}';

    RESTRequest.Params.AddUrlSegment('cnpj', EdtCnpj.Text);

    RESTRequest.Execute;

    lJsonObject := RESTResponse.JSONValue as TJSONObject;

    if (RESTResponse.StatusCode = 200) then
    begin

      // Nome da empresa.
      EdtNomeEmpresa.Text := lJsonObject.Values['nome'].Value;
      //

      // Atividade principal.

      MemoAtividadePrincipal.Lines.Add('Atividade principal');

      lJsonArray := lJsonObject.Get('atividade_principal').JSONValue as TJSONArray;

      for lCount := 0 to lJsonArray.Count - 1 do // Qualquer coisa tenta com o size.
      begin

        lJsonSubObject := lJsonArray.Items[lCount] as TJSONObject;

        MemoAtividadePrincipal.Lines.Add(lJsonSubObject.Values['code'].Value + ' - ' + lJsonSubObject.Values
          ['text'].Value);

        MemoAtividadePrincipal.Lines.Add('');

      end;

      //

    end
    else
    begin

      raise Exception.Create(lJsonObject.Values['message'].Value);

    end;

  except
    on E: Exception do
    begin
      raise Exception.Create('Erro ao realizar consulta do cnpj, motivo ' + E.Message);
    end;
  end;

end;

procedure TFrmPrincipal.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin

  if (Key = VK_ESCAPE) then
  begin

    Close;

  end;

end;

end.
